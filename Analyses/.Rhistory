library(geomorph)
library(abind)
filelist <- list.files(path= "../Data/Raw/Coordinates", pattern = "*.txt")
#Next step is to remove the Museum IDs from the specimen names
tmp <- matrix(unlist(strsplit(filelist, "_")),ncol=3,byrow = TRUE)
filelist_species <- paste(tmp[,1], tmp[,2], sep="_")
names <- gsub (".txt", "", filelist) # extracts names of specimens from the file name
filelist <- paste("../Data/Raw/Coordinates/", filelist, sep="") # rename with path
coords <- NULL # make empty object that will be filled with 3D array of coordinate data
for (i in 1:length(filelist)){
temp  <- read.morphologika(filelist[i])
k <- dim(temp)[1]
coords <- rbind(coords, two.d.array(temp)) }
Data <- arrayspecs(coords, k, 3)
dimnames(Data)[[3]] <- filelist_species
# remove(i, filelist, names, k, coords, temp) # clean up environment
#Double check that the 3D info is entered properly
plot3d(Data[,,4], asp=FALSE)
text3d(Data[,,4], texts=c(1:58))
filelist <- list.files(path= "../Data/Raw/Coordinates", pattern = "*.txt")
#Next step is to remove the Museum IDs from the specimen names
tmp <- matrix(unlist(strsplit(filelist, "_")),ncol=3,byrow = TRUE)
filelist_species <- paste(tmp[,1], tmp[,2], sep="_")
names <- gsub (".txt", "", filelist) # extracts names of specimens from the file name
filelist <- paste("../Data/Raw/Coordinates/", filelist, sep="") # rename with path
coords <- NULL # make empty object that will be filled with 3D array of coordinate data
for (i in 1:length(filelist)){
temp  <- read.morphologika(filelist[i])
k <- dim(temp)[1]
coords <- rbind(coords, two.d.array(temp)) }
Data <- arrayspecs(coords, k, 3)
dimnames(Data)[[3]] <- filelist_species
remove(i, filelist, names, k, coords, temp) # clean up environment
#Double check that the 3D info is entered properly
plot3d(Data[,,4], asp=FALSE)
text3d(Data[,,4], texts=c(1:58))
speclist<- read.delim("../Data/Raw/Trial_classifier_list.txt")
rownames(speclist) <-speclist$Specimen
View(speclist)
speclist[2,]
speclist[3,]
View(speclist)
speclist[1,]
filelist_species[,1]
filelist_species[1,]
filelist_species[1]
Data[,,1]
dimnames(Data[,,1])
dimnames(Data)
dimnames(Data[[3]])
dimnames(Data[[3]])[1]
dimnames(Data)[3]
#Double check that the order of your Array and the order of your specimen list are the same (they will need to talk to each other!)
dimnames(Data)[3]==rownames(speclist)
speclist
rownames(speclist)
#Double check that the order of your Array and the order of your specimen list are the same (they will need to talk to each other!)
dimnames(Data)[[3]]==rownames(speclist)
read.ply("../Data/Raw/Acrobates_pygmaeus_J7579.ply")
Apyg <- read.ply("../Data/Raw/Acrobates_pygmaeus_J7579.ply")
Apyg$material$color <- refmesh$it
Apyg$material$color <- Apyg$it
Apyg$material$color <- "pink"
Apyg$material$color <- "hotpink"
shade3d(Apyg)
plotspec(Apyg, Data[,,1], ptsize=1, )
plotspec(Apyg, Data[,,1], ptsize=1 )
plotspec(Apyg, Data[,,1], ptsize=2 )
?plotspec
plotspec(Apyg, Data[,,1], ptsize=2, lwd=0 )
plotspec(Apyg, Data[,,1], ptsize=2, lwd=0 )
plotspec(Apyg, Data[,,1], ptsize=2, lwd=0 )
#Run GPA
GPA <- gpagen(Data)
#Run GPA
GPA <- gpagen(Data)
PCA <- plotTangentSpace(GPA$coords)
plotRefToTarget(PCA$pc.shapes$PC1min, PCA$pc.shapes$PC1max)
plotRefToTarget(PCA$pc.shapes$PC1min, PCA$pc.shapes$PC1max, method="vector")
plotRefToTarget(PCA$pc.shapes$PC1min, PCA$pc.shapes$PC1max, method="vector")
plot(PCA$pc.scores[,1], GPA$Csize)
plot(PCA$pc.scores[,1]~ GPA$Csize)
plot(PCA$pc.scores[,1]~ log(GPA$Csize))
save.image(file="../Data/Processed/Read_in_Data")
save.image(file="../Data/Processed/Read_in_Data.rda")
library(geomorph)
library(abind)
filelist <- list.files(path= "../Data/Raw/Coordinates", pattern = "*.txt")
filelist
#Next step is to remove the Museum IDs from the specimen names
tmp <- matrix(unlist(strsplit(filelist, "_")),ncol=3,byrow = TRUE)
filelist_species <- paste(tmp[,1], tmp[,2], sep="_")
filelist_species
filelist <- list.files(path= "../Data/Raw/Coordinates", pattern = "*.txt")
#Next step is to remove the Museum IDs from the specimen names
tmp <- matrix(unlist(strsplit(filelist, "_")),ncol=3,byrow = TRUE)
filelist_species <- paste(tmp[,1], tmp[,2], sep="_")
names <- gsub (".txt", "", filelist) # extracts names of specimens from the file name
filelist <- paste("../Data/Raw/Coordinates/", filelist, sep="") # rename with path
coords <- NULL # make empty object that will be filled with 3D array of coordinate data
for (i in 1:length(filelist)){
temp  <- read.morphologika(filelist[i])
k <- dim(temp)[1]
coords <- rbind(coords, two.d.array(temp)) }
Data <- arrayspecs(coords, k, 3)
dimnames(Data)[[3]] <- filelist_species
remove(i, filelist, names, k, coords, temp) # clean up environment
attributes(Data)
Data[,,1]
Data[,,2]
speclist<- read.delim("../Data/Raw/Trial_classifier_list.txt")
rownames(speclist) <-speclist$Specimen
speclist
#This is a mesh I crunched down to 500,000 faces. It's 18 kb.
Apyg <- read.ply("../Data/Raw/Acrobates_pygmaeus_J7579.ply")
Apyg$material$color <- Apyg$it
Apyg$material$color <- "hotpink"
speclist<- read.delim("../Data/Raw/Trial_classifier_list.txt")
rownames(speclist) <-speclist$Specimen
#This is a mesh I crunched down to 500,000 faces. It's 18 kb.
Apyg <- read.ply("../Data/Raw/Acrobates_pygmaeus_J7579.ply")
shade3d(Apyg)
#There's a weird thing about these meshes at the moment, they show up as black. So to fix this I found a strange workaround - but any improvements are much appreciated
Apyg$material$color <- Apyg$it
Apyg$material$color <- "hotpink"
#Isn't she gorgeous!!
shade3d(Apyg)
Apyg$material$color <- Apyg$it
Apyg$material$color <- "hotpink"
#Isn't she gorgeous!!
shade3d(Apyg)
dimnames(Data)[[3]]==rownames(speclist)
#Double check that the 3D info is entered properly by checking landmark numbers
plot3d(Data[,,4], asp=FALSE)
#Double check that the 3D info is entered properly by checking landmark numbers
plot3d(Data[,,4], asp=TRUE)
#Double check that the 3D info is entered properly by checking landmark numbers
plot3d(Data[,,4], asp=FALSE, cex=3)
?plot3d
#Double check that the 3D info is entered properly by checking landmark numbers
plot3d(Data[,,4], asp=FALSE, col="hotpink", size = 4)
#Double check that the 3D info is entered properly by checking landmark numbers
plot3d(Data[,,4], asp=FALSE, col="hotpink", radius = 4)
plot3d(Data[,,4], asp=FALSE, col="hotpink")
text3d(Data[,,4], texts=c(1:58))
plot3d(Data[,,4], asp=FALSE, col="hotpink")
text3d(Data[,,4], texts=c(1:58))
plot3d(Data[,,4], asp=FALSE, col="hotpink")
text3d(Data[,,3], texts=c(1:58))
#open new 3D window so any previous don't accidentally superimpose
open3d()
#There's a way of getting rid of those lines but I forgot it.
plotspec(Apyg, Data[,,1], ptsize=2, lwd=0 )
?gpagen
plot3d(Data[,,4], asp=FALSE, col="hotpink")
text3d(Data[,,4], texts=c(1:58))
#Run GPA
GPA <- gpagen(Data)
attributes(GPA)
GPA$coords[,,1]
PCA <- plotTangentSpace(GPA$coords)
attributes(PCA)
plotRefToTarget(PCA$pc.shapes$PC1min, PCA$pc.shapes$PC1max, method="vector")
PCA <- plotTangentSpace(GPA$coords)
plotRefToTarget(GPA[,,2]. GPA[,,1])
plotRefToTarget(GPA[,,2], GPA[,,1])
plotRefToTarget(GPA$coords[,,2], GPA$coords[,,1])
plotRefToTarget(GPA$coords[,,2], GPA$coords[,,1], method="vector")
plotRefToTarget(GPA$coords[,,2], GPA$coords[,,1], method="vector")
plot(PCA$pc.scores[,1]~ log(GPA$Csize))
mshape(GPA)
mshape(GPA$coords)
Ref <- shape(GPA$coords)
Ref <- mshape(GPA$coords)
Ref
Ref
plotRefToTarget(Ref, PCA$pc.shapes$PC1max, method="vector")
findMeanSpec(GPA$coords)
