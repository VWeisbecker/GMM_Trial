#This line sets the working directory to be where this code is stored. At least on most computers. If this doesn't work, you should be able to just enter the whole file path wherever you need to read a file (or write to a file). In that case, beware of the slashes - R works with forward slashes (/) but PCs tend to work with backward slashes. There is a way of forcing slashes the right way but it's easier to just manually change.
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## Loading the libraries (and installing if necessary)
if(!require(geomorph)) install.packages("geomorph")
if(!require(abind)) install.packages("abind")
filelist <- list.files(path= "../Data/Raw/Coordinates", pattern = "*.txt")
tmp <- matrix(unlist(strsplit(filelist, "_")),ncol=3,byrow = TRUE)
filelist_species <- paste(tmp[,1], tmp[,2], sep="_")
names <- gsub (".txt", "", filelist) # extracts names of specimens from the file name
filelist <- paste("../Data/Raw/Coordinates/", filelist, sep="") # rename with path
coords <- NULL # make empty object that will be filled with 3D array of coordinate data
for (i in 1:length(filelist)){
temp  <- read.morphologika(filelist[i])
k <- dim(temp)[1]
coords <- rbind(coords, two.d.array(temp)) }
Data <- arrayspecs(coords, k, 3)
dimnames(Data)[[3]] <- filelist_species
remove(i, filelist, names, k, coords, temp) # clean up environment
attributes(Data)
#To navigate to a particular specimen (e.g. the second one in the array, which you know from the attributes() command above is called "Aepyprymnus_rufescens")
Data[,,7]
plot3d(Data[,,7], asp=FALSE, col="blue")
text3d(Data[,,7], texts=c(1:58))
#This is a mesh I crunched down to 600,000 faces. It's 18 kb.
Apyg <- read.ply("../Data/Raw/Acrobates_pygmaeus_J7579.ply")
library(Rvcg)
#This is a mesh I crunched down to 600,000 faces. It's 18 kb.
Apyg <- vcgPlyRead("../Data/Raw/Acrobates_pygmaeus_J7579.ply")
shade3d(Apyg)
Apyg$material$color <- Apyg$it
Apyg$material$color <- "hotpink"
#Isn't she gorgeous!!
shade3d(Apyg)
open3d()
#a transparent 3d object. alpha is 0=transparent, 1=opaque
shade3d(Apyg, alpha = 0.4)
# put on the landmarks as spheres, radius is how big
spheres3d(Data[,,1],  col="green", radius = 0.1)
#text for landmark numbers, e.g. if you want to determine the lm numbers for your patches and curves
text3d(Data[,,1], texts=c(1:58), pos = 2, cex=1.2, font = 2)
speclist<- read.delim("../Data/Raw/Trial_classifier_list.txt")
rownames(speclist) <-speclist$Specimen
#Double check that the order of your Array and the order of your specimen list are the same (they will need to talk to each other!). This has to return "TRUE" for all.
dimnames(Data)[[3]]==rownames(speclist)
#Run GPA
GPA <- gpagen(Data)
attributes(GPA)
GPA$coords[,,8]
findMeanSpec(GPA$coords)
Ref <- mshape(GPA$coords)
PCA <- gm.prcomp(GPA$coords)
#This is what's in a PCA
attributes(PCA)
palette <- rainbow(length(levels(as.factor(speclist$Diet))))
plot(PCA$x[,2]~ PCA$x[,1], pch=19, col= palette[as.factor(speclist$Diet)], cex=1)
text(  PCA$x[,2]~ PCA$x[,1], labels=rownames(speclist)  )
plot(PCA$x[,1]~ log(GPA$Csize), pch=19)
text(  PCA$x[,1]~ log(GPA$Csize), labels=rownames(speclist)  )
#This shows the differences between a hypothetical specimen's landmark configuration at the lower scores of PC1 - balls - and compares it to a hypothetical landmark configuration for the higher scores of PC1 (where the hairs point to)
plotRefToTarget(PCA$shapes$shapes.comp1$min, PCA$shapes$shapes.comp1$max, method="vector")
LM <- procD.lm(GPA$coords~ speclist$Diet)
summary(LM)
save.image(file="../Data/Processed/Read_in_Data.rda")
#Now if you clear the environment
rm(list = ls())
#You can now get it all back by doing:
load (file="../Data/Processed/Read_in_Data.rda")
